/* eslint-disable */
// tslint:disable
/**
 * Ofcom Connected Nations Broadband API
 * An API based on Connected Nations broadband data.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import { BASE_PATH, COLLECTION_FORMATS, FetchAPI, FetchArgs, BaseAPI, RequiredError, defaultFetch } from "./runtime";
import { Api } from "./models";
import { btoa } from "abab";
import { Buffer } from "buffer";
import { Headers, RequestInit, Response } from "node-fetch";
import { URLSearchParams } from "url";
import FormData from "form-data";

export type FactoryFunction<T> = (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) => T;

export namespace CoverageApi {
	export type CoverageByPostCodeGetResponse =
		| CoverageByPostCodeGet200Response
		| CoverageByPostCodeGet404Response
		| CoverageByPostCodeGet500Response
	
	export interface CoverageByPostCodeGet200Response {
		status: 200
		contentType: 'application/json'
		body: Api.FixedAvailability
		headers?: undefined
	}
	
	export interface CoverageByPostCodeGet404Response {
		status: 404
		contentType: 'application/json'
		body: Api.FixedAvailabilityNotFound
		headers?: undefined
	}
	
	export interface CoverageByPostCodeGet500Response {
		status: 500
		contentType: 'application/json'
		body: Api.GeneralError
		headers?: undefined
	}
	
}

/**
 * CoverageApi - fetch parameter creator
 * @export
 */
export const CoverageApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * <p>This endpoint will return predicted broadband speeds broken down by up/down and by Basic/Superfast/Ultrafast alongside percentage availability of the broadband speed categories.</p>
		 * @summary Get broadband provision by postcode
		 * @param {string} postCode <p>The postcode of interest</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coverageByPostCodeGet(postCode: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'postCode' is not null or undefined
			if (postCode === null || postCode === undefined) {
				throw new RequiredError('postCode', 'Required parameter postCode was null or undefined when calling coverageByPostCodeGet.');
			}

			let localVarPath = `/coverage/{PostCode}`
				.replace('{PostCode}', encodeURIComponent(String(postCode)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication apiKeyHeader required
			if (configuration && configuration.apiKey) {
				const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey('apiKeyHeader')
					: configuration.apiKey;
				if (localVarApiKeyValue !== null) {
					localVarHeaderParameter.set('Ocp-Apim-Subscription-Key', localVarApiKeyValue);
				}
			}
			// authentication apiKeyQuery required
			if (configuration && configuration.apiKey) {
				const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey('apiKeyQuery')
					: configuration.apiKey;
				if (localVarApiKeyValue !== null) {
					localVarQueryParameter.set('subscription-key', localVarApiKeyValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CoverageApi - functional programming interface
 * @export
 */
export const CoverageApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * <p>This endpoint will return predicted broadband speeds broken down by up/down and by Basic/Superfast/Ultrafast alongside percentage availability of the broadband speed categories.</p>
		 * @summary Get broadband provision by postcode
		 * @param {string} postCode <p>The postcode of interest</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coverageByPostCodeGet(postCode: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoverageApi.CoverageByPostCodeGetResponse> {
			const localVarFetchArgs = CoverageApiFetchParamCreator(configuration).coverageByPostCodeGet(postCode, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: 200,
							contentType: 'application/json',
							body: await response.json() as Api.FixedAvailability,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: 404,
							contentType: 'application/json',
							body: await response.json() as Api.FixedAvailabilityNotFound,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: 500,
							contentType: 'application/json',
							body: await response.json() as Api.GeneralError,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * CoverageApi - factory interface
 * @export
 */
export const CoverageApiFactory: FactoryFunction<CoverageApi> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new CoverageApi(configuration, basePath, fetch);
};

/**
 * CoverageApi - object-oriented interface
 * @export
 * @class CoverageApi
 * @extends {BaseAPI}
 */
export class CoverageApi extends BaseAPI {
	/**
	 * <p>This endpoint will return predicted broadband speeds broken down by up/down and by Basic/Superfast/Ultrafast alongside percentage availability of the broadband speed categories.</p>
	 * @summary Get broadband provision by postcode
	 * @param {string} postCode <p>The postcode of interest</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public coverageByPostCodeGet(postCode: string, options?: RequestInit) {
		return CoverageApiFp(this.configuration).coverageByPostCodeGet(postCode, options)(this.fetch, this.basePath);
	}

}

/**
 * We sometimes represent dates as strings (in models) and as Dates (in parameters) so this
 * function converts them both to a string.
 */
function dateToString(value: Date | string | undefined): string | undefined {
	if (value instanceof Date) {
		return value.toISOString();
	} else if (typeof value === 'string') {
		return value;
	} else {
		return undefined;
	}
}
